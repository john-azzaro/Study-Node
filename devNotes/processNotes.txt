  
Process Notes for Node
=======================




About Process Notes
===================
"Process Notes" is a step-by-step workflow document that outlines the "phases" of my study/app development and the successive steps taken at each
milestone of the examination. In the case of studies, the process notes might be eschewed in favor of the main Readme document in the repository, 
mostly because of the advantage in formatting and accessibility. However, I will put additional notes and resource links that might be helpful. In 
the case of application development, groups of related steps are combined into "phase" modules so that they can be reorganized and refined in 
post-review. This has proven to be EXTREMELY helpful in learning (i.e. Feynman technique (https://fs.blog/2012/04/feynman-technique/)) and refining 
workflow so I can improve my process in future projects. It also has come in handy for some tricky bug fixes not only for past projects, but this 
one as well so I would urge you to consider at least doing a rough summary for your own benefit.



Objective of Study
==================
The prupose of this node study is to do a good overview of node from the beginning to database management as a refresher.



Getting started with node
==========================
* Node debuggers have a broad use than just debugging code, it allows you to see what is happening when the code is executing step-by-step.
* IMportant things to keep in mind are: 
    NPM
    Executing JavaScript files
    Command line interface (CLI)
    Global and local installs
    Package.JSON run scripts
    NPX
    Require
    File system
    Argv
    Module exports


## How do you check node version?
===================================
* To check node version, use "npm --version".


## What is node and why use it?
================================
* Node JS is a multi-platform JavaScript environment which can be applied to many system tasks such as utility scripts and running web servers.
* Node is JavaScript running directly on a machine, not inside a browser.
* Why Node? Node is used to solve different problems than JavaScript in a browser.
* JavaScript in a browser focuses on web-page interactivity and features. 
* Node is instead used for many other task as well.
* Node is a free, open source multi-platform JavaScript environment.
* Node was created in 2009 using Google's V8 JavaScript engine.
* On top of the V8 engine sits a collection of "modules".


## What is NPM?
===============
* NPM is for managing a project's dependencies and other meta information.
* use NPM to initialize a new project, list which packages the project needs in order to function, and write short scripts that allow developers to work with the project.
* NPM is the Node package manager which we can use for managing Node projects, listing dependencies and configuring commands.


## How do you initialize an NPM project?
========================================
* Use the command "npm init"


## How do you install a package?
* Use the commmand "npm install X"
* For example, to install the package debug, use the command "npm install debug"
* When you install a package, you: 
    * Adds an entry to the list of dependencies in your package.json file.
    * Creates a folder called node_modules if it doesn't already exist.
    * Downloads the source code for this dependency and stores it inside the ./node_modules folder.
    * Downloads any dependencies of this dependency and also stores them recursively in your ./node_modules folder.


## What are CLI tools?
======================
* CLI tools are prepackaged scripts that one once, like create-react-app.


## What are local dependencies?
===============================
* Local dependencies are only for your local project, not for your whole machine, so your command line session doesn't know how to find the command.
* Local dependencies are preferred to global installs. Why? Well...
  * We might need different version numbers of the same dependency for different projects.
  * Local dependencies are listed in a package.json, making them explicit.
  * Global dependencies can have system level conflicts with other tools.
  * Globals can pollute your whole machine.
  * Local dependencies have less scope on your machine and therefore are less of a security risk.


## What is NPX?
===============
* NPX is used for one time commands, like running Create-react-app.
* NPX is used when you don't need to list this tool as a dependency for our project and we don't need them permanently installed on our machines.


# How do you execute node?
==========================
* There are multiple approaches to working with Node. The most useful approach is to use Node script files; these can be executed in 
  different ways such as node filename.js,
* To execute something in node, run the command "node <file-name>".


## How do you use the node debugger?
====================================
* The Node debugger is a powerful tool for understanding our own code and has more capabilities than console.log.
* The node debugger will debug and inspect the code while executing.
* In VSCode, you have a debugger section (the little bug icon with the x in the middle).
* There are four main parts to using the debugger:
    1. Setting and removing breakpoints.
    2. Starting the script in a debugging mode.
    3. Inspecting expressions.
    4. Navigating through statements.
* To debug, you need to set breakpoints first by selecting the line (creates a red dot on the code line).
* When you have that breakpoint established, you can run the debugger.
* Push the green play icon to start the debugger.
* This is called the "Continue" which will continue the script's execution
* After you push play, a few things will happen:
    * The currently active breakpoint is highlighted, with an outline around the red circle.
    * There are a list of the available variables, grouped by their scope.
    * The current call stack is displayed.
    * The loaded scripts are listed.
    * The Debug Console gives us feedback that the script started in debug mode.
    * Navigation controls such as "Step Over", "Restart" and "Continue" are available.
* You can now inspect the expressions by hovering over them.
* You can add new breakpoints at future lines of code whilst paused at other lines. Add new breakpoints and press "Continue" to jump to them.
* For all other cases, use the "Step over" button or "Continue".


## What is stepover navigation?
===============================
* Stepover is the little icon that is a dot and an right arching arrow over it.
* "Step over" will move over the current statement.
* Stepover navigation means stepping over parts of our code allows us to move through statements one at a time without adding new breakpoints.
* If you're paused before a function call you don't want to inspect: "Step over".


## What is the stepin navigation?
=================================
* This is the downwards popinting arrow to a small dot.
* Sometimes, the statement we're on is a function invocation, we may want our debugger to move into that function rather than stepping over it.
* If you're paused before a function you'd like to inspect: "Step into".


## What is the stepout navigation?
==================================
* This is the upwards facing arrow with a dot at the bottom.
* If you accidentally go into a function: "Step out".
* If you're finished inspecting a function but want to keep debugging: "Step out".


## How do you work with the filesystem
=======================================
* You can also use a built-in module in Node to access the file system (the files on your computer), called fs. 
* fs does not need to be installed, it is included with node.
* We can use this module to read, create, remove, rename, etc... directories and files on our machine.


## How does security factor into node?
======================================
* When working with Node, security becomes a very serious concern. As developers working with the back-end and systems, we need to be 
  mindful of potential security risks with our code as the risks can be very high.
* Just keep the following in mind:
    * Avoid writing files based on user input
    * Avoid reading and executing files you don't trust
    * Restrict access to the file system to specific users when possible
    * Restrict access to only specified directories
    * Prefer to use a database


## How do you require modules?
==============================
* First, before you require a module, make sure it is installed corretly in your package.json file.
* Require is similar to import.
* Require will "require" a local dependency you have installed for use in the file.
* The require() function is globally available in Node projects and similar in behavior to the import x from 'x' statements we used in React.
      // works in webpack and babel projects
        import React from 'react';
        import debug from 'debug';
      // works in Node projects
        const React = require('react');
        const debug = require('debug');
* The require syntax (Common JS) behaves very similarly to the import from syntax we used in create-react-app projects.  
* The import from syntax is a much more recent addition to the JavaScript language and so is not consistently supported everywhere. 
* Use require to make sure dependencies can be used with confidence.


## How do you require custom modules?
======================================
* To require custom modules, you simply need to require the module "const chalk = require('chalk-animation')";


## How do you export modules?
=============================
* To export a module, you put it down at the bottom and write "module.exports = { animateString } ";





======================
======================
#Web APIs and express
======================
======================




## What is a webserver?
======================
  * A web server is a program that understands URLs and can read HTTP requests. Web servers may serve up static files 
    (like HTML, CSS, JavaScript, or image files) or serve up dynamic content (i.e. content that is produced by a 
    program on request).


## What is a URL?
=================
  * A URL is simply an address for some unique resource on the Web. A resource could be any file such as an HTML page, 
    CSS document, JavaScript file, image file, video and so on.

      protocol                     port                       query
          |                          |                           |
        http://   www.domain.com    :80   /path/to/my/resource   ?   key1=value&key2=value2
                        |                           |                            |
                      domain                       path                     query-string

                * protocol: Tells the browser which protocol to use. Usually HTTP or HTTPS for web content, but many 
                            other protocols exist. FTP, for instance, is used to transfer files from one machine to 
                            the next.

                * domain: The domain uniquely identifies a web server and is actually mapped to an IP address.

                * port: The port identifies an application on a machine. Think of the IP address as a telephone number 
                        to a landline phone that is shared by several people. Even if you dial the number you still 
                        need to ask for the person to whom you wish to speak. The IP address takes you to the correct 
                        machine but the port number determines which application your request will be routed to.

                * path: Once you have found the web server, the web server itself takes over from here. The path identifies 
                        the resource that you wish to access. Sometimes this path may refer to a physical path to a file 
                        on the machine, but more often than not it is an abstract value that simply maps the incoming 
                        request to a function.

                * query string: The query string is a set of parameters formatted into key/value pairs. Even though this 
                                string exists on the end of the URL it is not used for routing the request to the resource, 
                                but rather to send data into the function executed on the resource.



## How do webserver receieve request messages?
==============================================
-------------------------------------------------------------------
GET /dashboard HTTP/1.1                                                 // HTTP method (makes async calls to server and signals the users intention), the path, and the protocol id.
User-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT)
Host: thinkful.com                                                      // specifies the host part of the URL and is required for HTTP 1.1. This is because a single machine with a single IP address may be home to several different domains.
Accept-Language: en-us                                                  // which language the user prefer
Accept-Encoding: gzip, deflate
Connection: Keep-Alive
-------------------------------------------------------------------



## What is express?
===================
  * Express is a minimalist framework, meaning that it does the bare minimum required, but is designed 
    to allow anyone to add to the functionality.
  * Express is the most widely used web framework for Node today. Express "knows" how to read and 
    interpret HTTP requests and also "knows" how to respond to the client with HTTP responses.
  * Express provides:
      * Handlers for requests for all the HTTP verbs (GET, POST, etc)
      * Common web application settings such as port numbers
      * An architecture that allows middleware, so you can modify the request handling pipeline at any point.

  

# What is the express framework made of?
========================================
  * express(): The top-level function exported by the Express module. Calling this function creates an 
               Express app and gives us access to the other Express objects below.
  * Application: This object is the Express application itself. It provides methods to route HTTP requests, 
                 configure middleware and other functionality relevant to constructing web applications.
  * Request: Represents the HTTP request and has properties to access the various features of the request 
             such as query string, headers and so on. By convention, this object is referred to as req and is 
             passed to route handling methods.
  * Response: Represents the HTTP response that is sent to the client when the request is completed. Conventionally 
              called res, it is passed to route handling methods. It contains methods to format the response, set 
              the response headers and status code.
  * Router: We'll go over the Router object later on, but for now you can think of it as a "mini-application." 
            It is used to make your applications more modular.



## How do you create an express application?
============================================
  1. First, initiate an npm project with:        npm init -y       (note: use -y if you want all the default settings)
  2. To start application, run the commmand:     npm start
  3. Install express:                            npm install express
  4. Import express to App.js                    const express = require('express');
  5. Invoke the express module function:         const app = express();



## What methods are available to the app object?
================================================
  * The app object has methods for:
      * routing HTTP requests.
      * configuring middleware.
      * and more functionality too numerous to mention here.

  * For example, a basic GET request would look something like this:
    -----------------------------------------------------------
        app.get('/', (req, res) => {                                // "get" at the location "/", and then callback with a request/response...
          res.send('Hello Express!');                               // ... as a response a response of sending the message "Hello Express".
        });
    -----------------------------------------------------------


## What is a port?
===================
  * A port is something the server needs to listen to a specific port so that requests to that port will be 
    correctly routed to the server.
  * Port numbers range from 0 to 65535.
  * Ports 0 to 1023 are Well-Known Ports and have specific services associated with them.
  * Ports between 1024 and 49151 are user or registered ports and may have been registered by certain 
    companies for specific products.
  * All other ports are known as dynamic ports.
      -------------------------------------------------------------
        Port	Protocol	Description
        21	  FTP	      File Transfer protocol
        22	  SSH	      secure logins to remote servers
        23	  Telnet	  For remote management of servers
        80	  HTTP	    For web content
        110	  POP3	    Retrieve emails from a server
        443	  HTTPS	    Encrypted transmission of web content
      ---------------------------------------------------------------

  * For example, if you choose to listen on port 3000,  this is what you would use:
    --------------------------------------------------------------------------------------
        app.listen(3000, () => {
          console.log('Express server is listening on port 3000!');
        });
    --------------------------------------------------------------------------------------



## What does a basic express application look like?
===================================================
  -----------------------------------------------------------------------------------------
      const express = require('express');
      const app = express();

      app.get('/', (req, res) => {
        res.send('Hello Express!');
      });

      app.listen(3000, () => {
        console.log('Express server is listening on port 3000!');
      });
  -----------------------------------------------------------------------------------------
  * And to run the app, you simply navigate to localhost:3000 in your browser.
  * Remember to run "npm start" to start your app and press ctrl-c when you are done.




## How do you route in an express application?
==============================================
  * Routing is the process of responding to a client's request to a particular endpoint. An endpoint 
    consists of the path and the HTTP request method (GET, POST, and so on).
  * Express will examine the HTTP method and the path and attempt to find a relevant route.
  * When it finds a route we say that the route is matched and the functions associated with that route are executed.
  * If no routes are found a response with status 404 Not Found is returned.

  * Examples of routes would be:
      * http://mywebsite.com/                       -- Home
      * http://mywebsite.com/about                  -- About page
      * http://mywebsite.com/about/contact          -- Contact page




## How do you create a GET route?
=================================
  * To create a GET route,  we use the .get() method of the Express application object.   
    ------------------------------------------------------------------------
        app.get(PATH, HANDLER);
    ------------------------------------------------------------------------
        * The "PATH" is the path on the server.
        * The "HANDLER" is a function to be executed when the route matches.
            * The handler must accept two parameters:
                1. Request Object (req)
                2. Response Object (res)
            * The response function is invoked by express in response to a request for
              this endpointand the two object are passed into the function.

  * When you make a request to localhost:3000/greeting, you will receive the message "Hello !orld!"
    ------------------------------------------------------------------------
        app.get('/greeting', (req, res) => {
          res.send('Hello World!');
        })
    ------------------------------------------------------------------------



## What are the request and response objects?
============================================
  * In a basic request handler, it accepts two parameters, "req" and "res".
    -------------------------------------------------------------------
      (req, res) => {
        res.send('Hello Express!');
      }
    -------------------------------------------------------------------
  * The first parameter, named req is an object that represents the HTTP request and has methods 
    to access the various properties of that request.
  * The second parameter, named res is an object that represents the HTTP response that Express 
    sends to the client after the request is processed.
  * The names of these parameters do not matter, but by convention, they are usually named req and res.



## What is the query object?
============================
  * The query property of the request contains an object with a property for each query string on the URL.
  * Recall that the query string is the set of key/value pairs after the question mark (?) on the URL. 
  * It does not form part of the routing for the URL but rather carries information that the handler function 
    may use to process the request.

  * To test the query feature out, take this route handler on the path /queryViewer:
    -------------------------------------------------------------------------------
        app.get('/queryViewer', (req, res) => {
          console.log(req.query);
          res.end(); //do not send any data back to the client
        });
    -------------------------------------------------------------------------------
        * This will return an empty object (i.e. {}).
        * If you were to add a quer string to your url like this:  http://localhost:8000/queryViewer?name=Legolas
        * The query object would contain the query string:         { name: 'Legolas' }
        * And you could add more to the query string with "&":     http://localhost:8000/queryViewer?name=Legolas&race=elf   
                                                                   { name: 'Legolas', race: 'elf' }

  * In practical application, a function that responds to the query string send from the client should:
        1. retrieve the parameter values from the query object
        2. validate the parameter values, never trust the client
        3. if the values are invalid, respond with an error
        4. if the values are valid, process the request. That is, do whatever the purpose of the function was in the first place
        5. construct a response
        6. send the response

  * So if you are interested in the name and race of fantasy characters, you need both values:
    --------------------------------------------------------------------------------------
          app.get('/greetings', (req, res) => {
            const name = req.query.name;                                                   // get the name value from the request.
            const race = req.query.race;                                                   // get the race value from the request.

            if(!name) {                                                                    // validate the name... and if it is not provided...
              return res.status(400).send('Please provide a name');                        // send an error response with 400 (request not done properly by client)..               
            }

            if(!race) {                                                                    // same for race, attempt to validate... and if it is not provided...
              return res.status(400).send('Please provide a race');                        // send an error response with 400 (request not done properly by client).
            }

            const greeting = `Greetings ${name} the ${race}, welcome to our kingdom.`;     // if both the name and the race are valid...

            res.send(greeting);                                                            // ... send a response.
          });
    --------------------------------------------------------------------------------------




## Why and how to do you log in application development?
========================================================
  * To to a simpel log, you simply need to insert a console.log with a message:
    -------------------------------------------------------------------------
        app.get('/greeting', (req, res) => {
          console.log('greeting was called');                               // logged successful route to console.
          res.send('Hello World!');
        })
    -------------------------------------------------------------------------



## How do you use the morgan logging tool?
===========================================
  * However, simple logging is limited in functionality, so you need to use a logging tool like morgan.
  * Morgan has the ability to format the log output in a number of different ways. For example, you can 
    use: combined, common, dev, short and tiny.
  * You can also customize the output.

  1. First, install the morgan library:     npm install morgan
  2. Import morgan to your application:     const morgan = require('morgan');
  2. "Mount" the morgan middleware:         app.use(morgan('dev'));




## What is middleware?
=====================
  * middleware just means that a request can pass through multiple functions on the server before reaching
    its final handler. 
  * In working with Express, you'll often hear that it's essentially a series of middleware functions.
  * Morgan is an example of a middleware function.
  * Think of Express like a factory with an assembly line. Each handler function is a station along that 
    assembly line. As the request progresses along the assembly line, each handler function may modify it. 
    Eventually, the request gets to the final handler function in the line and a response is sent back 
    to the client.
  * It is important to note that at each point along the line, the handler function may choose to abort 
    the progress and respond to the client with an error.
    -------------------------------------------------------------------------
      const express = require('express');
      const morgan = require('morgan');

      const app = express();

      app.use(morgan('dev'));                                                     // all requests pass through middleware like morgan to thier final handler.

      app.get('/', (req, res) => {                                                // This is the final handler.
          res.send('Hello Express!');
      });

      app.listen(8000, () => {
          console.log('Express server is listening on port 8000!');
      });
    -------------------------------------------------------------------------



====================
====================
Express Response Object
====================
====================


## What is the response object in express?
==========================================
  * The second part of the work of the web server is constructing the HTTP response and sending it back to the client.
  * Express provides an object that represents this HTTP response which we have been naming res so far.
  * To send a response there are a few considerations:
      * Is there an error condition? Did something fail on the server that we need to communicate to the client? Or did 
        everything work as expected? What is the status of the response?
      * Do you need to set any headers on the response?
      * Do you need to send data?
      * What format is your data that you are sending?

  * The response object in Express provides several methods to allow you to construct the response that you wish to send.   



## What is HTTP status?
=======================
  * Depending on the purpose of the request and the ability to fulfill the request you determine the status that will be 
    sent to the client. The HTTP protocol specification defines a number of status codes with predefined meanings that 
    you can use.

  * To set the status on your repsonse, you need to use the "status()" method.
      ----------------------------------------------------------
          app.get('/hello', (req, res) => {
            res.status(200);                                        // response status of 200. You can even chain them together (i.e. .status(200).send('Hello...'))
            res.send('Hello, everything was ok!');
          });
      ----------------------------------------------------------

  * There are a number of status codes, but here are some of the most commmon.

    Code	Status                    Text	Description
    -=-==-=--==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    200	  OK	                      The request has succeeded. This is the most common response and the default when no other status is set. 
                                    In the examples above where we called send() the status code would automatically be 200. It is expected 
                                    that some information is also being returned with this response.

    201	  Created	                  The request has been fulfilled and a new resource has been created on the server. This is usually in 
                                    response to a POST request. The information in the response varies, it may contain a representation of 
                                    the created resource, or not be present. In some cases, a location header with a link to the newly-created 
                                    resource may be set.

    204	  No Content	              The server successfully processed the request but does not need to return any information.

    304	  Not Modified	            The requested resource has not been modified since the last time it was requested. This saves bandwidth as 
                                    the same resource does not need to be sent twice.

    400	  Bad Request	              The request could not be understood by the server due to malformed syntax. The client should fix the problem 
                                    with the request before resubmitting.

    401	  Unauthorized	            The request requires user authentication. For instance, if the credentials provided are not valid, or 
                                    if they are missing.

    403	  Forbidden	                The server understood the request but is refusing to fulfill it. Authentication will make no difference. 
                                    Typically means that the operation being requested is not allowed.

    404	  Not Found	                The requested resource could not be found. This is used when the path being requested does not exist.

    500	  Internal Server Error	    The server encountered an unexpected condition which prevented it from fulfilling the request. This is a 
                                    generic catch-all error when any server-side exception happens.
    -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-





What is JSON data?
===================
  * Frequently the server needs to send JSON data to the client.
  * To do so a content-type header needs to be set indicating to the client that the body of the response contains JSON.
  * The .json() method sets the correct content-type and converts the parameter provided to a JSON string using JSON.stringify(). 

  * When you send an object via JSON:
    -----------------------------------------------------------------------
        app.get('/video', (req, res) => {
          const video = {
            title: 'Cats falling over',
            description: '15 minutes of funny cats',
            length: '15.40'
          }
          res.json(video);                                                    // the response is the video object sent via the json method
        });
    -----------------------------------------------------------------------

    * When you send an array of objects, you still use the res.json method:
    ----------------------------------------------------------------------
      app.get('/colors', (req, res) => {
        const colors = [
          {
            name: "red",
            rgb: "FF0000"
          },
          {
            name: "green",
            rgb: "00FF00"
          },
        ];
        res.json(colors);                                                     // the response is the colors array with objects via the json method.
      });
    ----------------------------------------------------------------------





## How do you build an Express application?
===========================================
  * Express is used to build a web application that is the server side of your application.
  * The client application may be built with any technology you choose including React.

  Objective: Build a React application.
      * For this application, create 2 components: The App component (with form) and the book component to display the book details.

  
  1. The book component that displays the details of the individual books
    --------------------------------------------------------------------------
        export default function Book(props) {
          return (
            <div className="book">
              <h2>{ props.title }</h2>
              <div className="book_author">by { props.author }</div>
              <div className="book_publisher">
                Published by: { props.publisher }
                on {moment(props.published_date).format('DD MMM YYYY')}
              </div>
              <div className="book_description">{ props.description }</div>
              <div className="book_details">
                Rank {props.rank} this week
              </div>
            </div>
          );
        }
    --------------------------------------------------------------------------

2. The App component implements the form and to capture user input:
  ----------------------------------------------------------------------------
    import React, { Component } from 'react';
    import './App.css';
    import Book from './book/book';

    class App extends Component {                                                     // App component:
      constructor(props) {                                                            // with a constructor and props passed in...
        super(props);                                                                 // with access to outer props
        this.state = {                                                                // and initial states.
          books: [],
          search: '',
          sort: '',
          error: null
        }
      }

      setSearch(search) {                                                             // method to set the state of the search feature.
        this.setState({
          search
        });
      }

      setSort(sort) {                                                                 // method to set the state for the sort feature.
        this.setState({
          sort
        });
      }

      handleSubmit(e) {                                                               // event handler for the form submission.
        e.preventDefault();                                                           // ... prevent defualt for form submission...
        const baseUrl = 'http://localhost:8000/books';
        const params = [];
        if (this.state.search) {
          params.push(`search=${this.state.search}`);
        }
        if (this.state.sort) {
          params.push(`sort=${this.state.sort}`);
        }
        const query = params.join('&');
        const url = `${baseUrl}?${query}`;

        fetch(url)
          .then(res => {
            if (!res.ok) {
              throw new Error(res.statusText);
            }
            return res.json();
          })
          .then(data => {
            this.setState({
              books: data,
              error: null
            });
          })
          .catch(err => {
            this.setState({
              error: 'Sorry, could not get books at this time.'
            });
          })

      }

      render() {
        const books = this.state.books.map((book, i) => {
          return <Book {...book} key={i}/>
        })
        return (
          <main className="App">
            <h1>NYT Best Sellers</h1>
            <div className="search">
              <form onSubmit={e => this.handleSubmit(e)}>
                <label htmlFor="search">Search: </label>
                <input
                  type="text"
                  id="search"
                  name="search"
                  value={this.state.search}
                  onChange={e => this.setSearch(e.target.value)}/>

                <label htmlFor="sort">Sort: </label>
                <select id="sort" name="sort" onChange={e => this.setSort(e.target.value)}>
                  <option value="">None</option>
                  <option value="title">Title</option>
                  <option value="rank">Rank</option>
                </select>
                <button type="submit">Search</button>
              </form>
              <div className="App_error">{ this.state.error }</div>
            </div>
            {books}
          </main>
        );
      }
    }

    export default App;
  ----------------------------------------------------------------------------

  